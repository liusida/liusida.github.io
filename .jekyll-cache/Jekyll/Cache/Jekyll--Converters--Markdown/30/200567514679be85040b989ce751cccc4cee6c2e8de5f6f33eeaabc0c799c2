I"Ì<p>Imagine that we have designed an computational experiment in Python, and we waited 3 days for the results, and after that, unfortunately we discovered there was a typo or a small bug in the source code. What do you think we would say when we restart the experiment? I would hope that the experiment could be run in half a hour.</p>

<p>It is possible, by making the code parallized.</p>

<p>CUDA is a C++-like program language for parallel programs which can run on Nvidia GPU. <a href="https://developer.nvidia.com/cuda-toolkit">CUDA website</a></p>

<p>PyCUDA is an open source Python interface to compile CUDA source code on the fly and execute it. <a href="https://documen.tician.de/pycuda/">PyCUDA documentation</a></p>

<p>Here we show an example of using CUDA and PyCUDA to rewrite a Python program.</p>

<p>Source code: <a href="https://github.com/liusida/JacksCarRental-via-PyCUDA">GitHub repo</a></p>

<p>The file <code class="highlighter-rouge">car_rental.py</code> is a Python program. It is slow because there are huge nested loops. We can exam this by searching for the keywords <code class="highlighter-rouge">while True</code> and <code class="highlighter-rouge">for</code>.</p>

<p>The file <code class="highlighter-rouge">car_rental_cuda.py</code> is the CUDA-optimized version of the original program. The <code class="highlighter-rouge">gpu_policy_evaluation</code> and <code class="highlighter-rouge">gpu_policy_improvement</code> are two kernels (CUDA interfaces) that can run 21*21 (num_state=21) threads in parallel. In this code, it prepares the pre-defined constant vairables and read in the CUDA source file <code class="highlighter-rouge">car_rental_cuda.py.cu</code>, compiles them on the fly, and expose the interfaces as Python functions.</p>

<p>By running them, we can get the results in the <code class="highlighter-rouge">images/</code> folder. And we can see the CUDA version only takes 6 seconds while the original version would take more than a hour.</p>
:ET